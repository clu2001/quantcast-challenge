#! /usr/bin/env python
import csv
import argparse
from http import cookies
from os import path 
import datetime




def main(argv=None):
    # check arguments given are valid 
    argumentValues = checkArgumentValidity(argv)
    filePath = argumentValues[0]
    targetDate = argumentValues[1]

    # get list of cookies from target date
    cookiesOnTargetDate = getCookiesListOnTargetDate(filePath, targetDate)

    # get most frequent cookie(s) - depending on if there is a tie or not 
    mostFrequentCookies = getMostFrequentCookies(cookiesOnTargetDate)

    # print most frequent cookie(s)     
    for cookie in mostFrequentCookies:
        print(cookie)




def getCookiesListOnTargetDate(filePath, targetDate):

    # list to store all the cookies given on the target date 
    cookiesOnTargetDate = []
    # read cookie log file 
    with open(filePath) as cookieLog:

        CSVreader = csv.reader(cookieLog, delimiter=',')
        # iterate through each row in the cookie log CSV file 
        for row in CSVreader: 
            timestamp = row[1]
            # if date is found in the timestamp, then we will add the cookie 
            # to the list of cookies 
            if targetDate in timestamp: 
                cookie = row[0]
                cookiesOnTargetDate.append(cookie)
    # return list of cookies on target date 
    return cookiesOnTargetDate




def getMostFrequentCookies(cookiesOnTargetDate):
    # return the most cookie with the highest frequency in cookiesOnTargetDate list 
    cookiesDict = {}
    mostFrequentCookies = []
    maxCount = 0
    # make a new dictionary where the key are the cookies, and the values are the number
    # of occurences 
    for cookie in cookiesOnTargetDate:

        if cookie not in cookiesDict:
            cookiesDict[cookie] = 0
        cookiesDict[cookie] += 1

    # store the max cookie frequency
    maxCount = max(cookiesDict.values())

    # retrive the most frequent cookie (or cookies - depending on if there is a tie for
    # number of occurences
    for key in cookiesDict:
        if cookiesDict[key] == maxCount:
            mostFrequentCookies.append(key)
    # return list of most frequent cookies 
    return mostFrequentCookies




def checkArgumentValidity(argv):

    # parse command line into Python data types 
    argparser = argparse.ArgumentParser(description="Find the most active cookie given a cookie log file and a date")
    argparser.add_argument(dest="filePath", help="File path to cookie log CSV")
    argparser.add_argument('-d', dest="targetDate", help="Target date to find cookie")

    # save file arguments into variables
    args = argparser.parse_args()
    filePath = args.filePath
    targetDate = args.targetDate

    # test if all necessary arguments (file path and target date) are input by the user
    # if not, raise necessary exceptions to show an error has occured 
    if not path.exists(filePath):
        raise Exception("Invalid file path")
    if targetDate == None:
        raise Exception("Please input a target date as argument")
    # validate the target date argument using datetime library
    try:
        datetime.datetime.strptime(targetDate, '%Y-%m-%d')
    except ValueError:
        raise ValueError("Incorrect date format, should be YYYY-MM-DD")
    
    # return filePath and targetDate to be used in main function
    return [filePath, targetDate]


if __name__ == "__main__":
    main()

